process {

	withName: "FASTQTOUBAM" {
	
		// put specific requirements here
		maxRetries = 1
	}


	withName: "SAMTOFASTQANDBWAMEM" {
	
		// put specific requirements here
		maxRetries = 1
	}
	
	withName: "MERGEBAMALIGNMENT" {
	
		// put specific requirements here
		maxRetries = 1
	}

	withName: "SORTANDFIXTAG" {
	
		// put specific requirements here
		maxRetries = 1
	}

	withName: "LEFTALIGNINDELS" {
	
		// put specific requirements here
		maxRetries = 1
	}

	withName: "BASERECALIBRATOR" {
	
		// put specific requirements here
		maxRetries = 1
	}

	withName: "APPLYBQSR" {
	
		// put specific requirements here
		maxRetries = 1
	}

	withName: "GETPILEUPSUMMARIES_.*"{
		ext.prefix = {"${bam.getSimpleName()}"}
	}

	withName: "CALCULATECONTAMINATION_.*"{
		ext.prefix = {"${table.getSimpleName()}"}
	}

	withName: 'SAMTOOLS_STATS' {
        maxRetries = 1
    }

	withName: "QUALIMAP" {
		// put specific requirements here
		maxRetries = 1
	}
	
	withName: 'MOSDEPTH' {
        publishDir = [
            mode: params.publish_dir_mode,
            path: { "${params.output}/reports/mosdepth/" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
			pattern: "*.{txt,d4,gz,csi}"
        ]
    }
	
	withName: 'COVERAGPERTARGET' {
        maxRetries = 1
    }

	withName: 'FREEBAYES' {
	
		// put specific requirements here
		maxRetries = 1
		ext.prefix = {"${bam.getSimpleName()}"}
	}

	withName: 'TABIX_BGZIPTABIX'{
		ext.prefix = { "${vcf.baseName.minus(".vcf")}" }
	}

	withName: 'TABIX_BGZIPTABIX_.*'{
		publishDir           = [
        mode: params.publish_dir_mode,
        path: { "${params.output}/variant_calling"},
    ]
		ext.prefix = { "${vcf.baseName.minus(".vcf")}" }
	}

	withName: 'BCFTOOLS_NORM' {
		ext.prefix = { "${vcf.baseName.minus(".vcf")}" }
	}
	withName: 'MUTECT2_.*' {
	
		// put specific requirements here
		maxRetries = 1
	}

	withName: 'MUTECT2_NODOWNSAMPLE' {
		ext.args = '--max-reads-per-alignment-start 0'
		ext.prefix       = { "${bam.getSimpleName()}.mutect2" }
	}

	withName: 'MUTECT2_DOWNSAMPLE' {
		ext.args = '--max-reads-per-alignment-start 1000'
		ext.prefix       = {"${bam.getSimpleName()}.mutect2_1000x"}
	}

	withName: 'LOFREQ_CALL' {
		maxRetries = 1
	}

	withName: 'LOFREQ_INDELQUAL' {
		maxRetries = 1
	}

	withName: 'BCFTOOLS_SPLITVEP'{
		ext.args          = [
                '%SYMBOL','%CHROM','%POS','%REF','%ALT',
				'%QUAL','%FILTER','%AF','%DP','%SB','%DP4',
				'%Consequence','%IMPACT','%Feature_type',
				'%Feature','%BIOTYPE','\'%EXON','\'%INTRON','%HGVSc',
				'%HGVSp','%cDNA_position','%CDS_position',
				'%Protein_position','%Amino_acids','%Codons',
				'%Existing_variation','%DISTANCE','%STRAND',
				'%FLAGS','%SYMBOL_SOURCE','%HGNC_ID','%REFSEQ_MATCH',
				'GIVEN_REF','%USED_REF','%BAM_EDIT','%HGVS_OFFSET',
				'%REFSEQ_OFFSET','%CLIN_SIG','%SOMATIC','%PHENO'
            ].join('\t').trim()
		
		ext.prefix = { "${vcf.baseName.minus(".vcf")}" }
        
		publishDir       = [
                [
                    mode: params.publish_dir_mode,
                    path: { "${params.output}/annotation/" },
                    pattern: "*{txt}"
                ]
            ]
	}


	

	withName: 'LEARNREADORIENT_.*'{
		maxRetries = 1
		ext.prefix = {"${f1r2.baseName.minus(".f1r2.tar")}"}
	}

	withName: "FILTERMUTECTCALL_.*" {
		maxRetries = 2
		ext.prefix = { "${vcf.baseName.minus(".vcf")}" }
		publishDir = [
            mode: params.publish_dir_mode,
            path: { "${params.output}/variant_calling/" },
			pattern: "*.{tbi,gz}"
        ]
	}
	
	withName: "LEFTTRIMANDALIGN_.*" {
		maxRetries = 5
		ext.prefix = { "${vcf.baseName.minus(".vcf")}" }
	}


	// VCF QC
    withName: 'BCFTOOLS_STATS_.*'{
        ext.prefix = { "${vcf.baseName.minus(".vcf")}" }
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.output}/reports/bcftools/" },
			pattern: "*stats.txt"
        ]
    }

    withName: 'VCFTOOLS_.*'{
        maxRetries = 1
		ext.prefix = { "${vcf.baseName.minus(".vcf")}" }
    }

    withName: 'VCFTOOLS_TSTV_COUNT_.*'{
        ext.args         = "--TsTv-by-count"
		maxRetries = 1
    }

    withName: 'VCFTOOLS_TSTV_QUAL_.*'{
        ext.args         = "--TsTv-by-qual"
		maxRetries = 1
    }

    withName: 'VCFTOOLS_TSTV_SUMMARY_.*'{
        ext.args         = "--TsTv-summary"
		maxRetries = 1
    }
	
	withName: "SNPEFF_.*" {
		ext.prefix = { "${vcf.baseName.minus(".vcf")}" }
		// put specific requirements here
		maxRetries = 1
	}
	

	withName: 'ENSEMBLVEP_NODOWNSAMPLE' {
			ext.vep           = {
				'~/ensembl-vep/vep'
			}
            ext.args          = [
                '--cache --refseq --check_existing --use_given_ref --force_overwrite --offline',
				'--assembly GRCh37 --tab --everything --offline --format vcf',
            ].join(' ').trim()
            // If just VEP: <vcf prefix>_VEP.ann.vcf
            ext.prefix = { "${vcf.baseName.minus(".vcf")}.VEP" }
			ext.suffix = {"tsv"}
            publishDir       = [
                [
                    mode: params.publish_dir_mode,
                    path: { "${params.output}/annotation/" },
                    pattern: "*{tsv}"
                ]
            ]
    }

	withName: 'ENSEMBLVEP_DOWNSAMPLE' {
			ext.vep           = {
				'~/ensembl-vep/vep'
			}
            ext.args          = [
                '--cache --refseq --check_existing --use_given_ref --force_overwrite --offline',
				'--assembly GRCh37 --tab --everything --offline --format vcf',
            ].join(' ').trim()
            // If just VEP: <vcf prefix>_VEP.ann.vcf
            ext.prefix = { "${vcf.baseName.minus(".vcf")}.VEP" }
			ext.suffix = {"tsv"}
            publishDir       = [
                [
                    mode: params.publish_dir_mode,
                    path: { "${params.output}/annotation/" },
                    pattern: "*{tsv}"
                ]
            ]
    }

	withName: 'ENSEMBLVEP_FREEBAYES' {
			ext.vep           = {
				'~/ensembl-vep/vep'
			}
            ext.args          = [
                '--cache --refseq --check_existing --use_given_ref --force_overwrite --offline',
				'--assembly GRCh37 --tab --everything --offline --format vcf',
            ].join(' ').trim()
            // If just VEP: <vcf prefix>_VEP.ann.vcf
            ext.prefix = { "${vcf.baseName.minus(".vcf")}.VEP" }
			ext.suffix = {"tsv"}
            publishDir       = [
                [
                    mode: params.publish_dir_mode,
                    path: { "${params.output}/annotation/" },
                    pattern: "*{tsv}"
                ]
            ]
    }


	withName: 'ENSEMBLVEP_LOFREQ' {
		ext.vep           = {
				'~/ensembl-vep/vep'
			}
		ext.args          = [
                '--cache --hgvs --refseq --check_existing --force_overwrite --offline --vcf'
            ].join(' ').trim()
		ext.suffix = {"vcf"}
		ext.prefix = { "${vcf.baseName.minus(".vcf")}.VEP" }
		publishDir       = [
                [
                    mode: params.publish_dir_mode,
                    path: { "${params.output}/variant_calling/" },
                    pattern: "*{vcf}"
                ]
            ]
	}

	withName: 'ANNOVAR_.*' {
		ext.annovar = {
			'~/annovar/table_annovar.pl'
		}
		publishDir       = [
                [
                    mode: params.publish_dir_mode,
                    path: { "${params.output}/annotation/" },
                    pattern: "*{txt}"
                ]
            ]
	}

	withName: "SNPSIFTDBSNP_.*" {
		ext.prefix = { "${vcf.baseName.minus(".vcf")}" }
		// put specific requirements here
		maxRetries = 1
	}
	
	withName: "SNPEFFONEPERLINE_.*" {

		ext.prefix = { "${vcf.baseName.minus(".vcf")}" }
	
		// put specific requirements here
		maxRetries = 1
	}
	

	withName: "SNPEXTRACTFIELDS_.*" {
	
		// put specific requirements here
		maxRetries = 1
		ext.prefix = { "${vcf.baseName.minus(".vcf")}" }
	}

	withName: "SNPEXTRACTFIELDS_NODOWNSAMPLE" {
		ext.args = {"ANN[*].GENE ANN[*].FEATUREID VC CHROM POS RS REF ALT FILTER GEN[0].AF GEN[0].FAD DP GEN[0].AD MMQ GERMQ MBQ AS_SB_TABLE GEN[0].F1R2 GEN[0].F2R1 ROQ MFRL MPOS RPA RU STRQ ECNT TLOD CONTQ NALOD NCount NLOD OCM SEQQ STR STRANDQ \
    ANN[*].ALLELE ANN[*].EFFECT ANN[*].IMPACT ANN[*].FEATURE ANN[*].BIOTYPE ANN[*].RANK ANN[*].HGVS_C ANN[*].HGVS_P ANN[*].CDNA_POS ANN[*].CDNA_LEN ANN[*].CDS_POS ANN[*].CDS_LEN ANN[*].AA_POS ANN[*].AA_LEN ANN[*].DISTANCE ANN[*].ERRORS ANN GEN[0]"}
	}

	withName: "SNPEXTRACTFIELDS_DOWNSAMPLE"{
		ext.args = {"ANN[*].GENE ANN[*].FEATUREID VC CHROM POS RS REF ALT FILTER GEN[0].AF GEN[0].FAD DP GEN[0].AD MMQ GERMQ MBQ AS_SB_TABLE GEN[0].F1R2 GEN[0].F2R1 ROQ MFRL MPOS RPA RU STRQ ECNT TLOD CONTQ NALOD NCount NLOD OCM SEQQ STR STRANDQ \
    ANN[*].ALLELE ANN[*].EFFECT ANN[*].IMPACT ANN[*].FEATURE ANN[*].BIOTYPE ANN[*].RANK ANN[*].HGVS_C ANN[*].HGVS_P ANN[*].CDNA_POS ANN[*].CDNA_LEN ANN[*].CDS_POS ANN[*].CDS_LEN ANN[*].AA_POS ANN[*].AA_LEN ANN[*].DISTANCE ANN[*].ERRORS ANN GEN[0]"}
	}
	
	withName: "SNPEXTRACTFIELDS_FREEBAYES"{
		ext.args = {"ANN[*].GENE VC CHROM POS RS REF ALT FILTER GEN[0].GT GEN[0].DP GEN[0].AD GEN[0].RO GEN[0].QR GEN[0].AO GEN[0].QA GEN[0].GL AB ABP AC AF AN AO CIGAR DP DPB DPRA EPP EPPR GTI LEN MEANALT MQM MQMR NS NUMALT ODDS PAIRED \
		PAIREDR PAO PQA PQR PRO QA QR RO RPL RPP RPPR RPR RUN SAF SAP SAR SRF SRP SRR TYPE ANN[*].ALLELE ANN[*].EFFECT ANN[*].IMPACT ANN[*].FEATURE ANN[*].FEATUREID ANN[*].BIOTYPE ANN[*].RANK ANN[*].HGVS_C ANN[*].HGVS_P ANN[*].CDNA_POS ANN[*].CDNA_LEN ANN[*].CDS_POS ANN[*].CDS_LEN ANN[*].AA_POS ANN[*].AA_LEN ANN[*].DISTANCE ANN[*].ERRORS ANN GEN[0]"} 
	}
	
	withName: "GENERATEREPORT_.*" {
	
		// put specific requirements here
		maxRetries = 1
		ext.prefix = {"${tsv.baseName.minus('.tsv')}"}
	}

	withName: 'COMBINEVCF' {
		maxRetries = 1
	}
	withName:'MULTIQC' {
		publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.output}/reports/multiqc/" },
			pattern: "{*multiqc_report.html,*_data,*_plots}"
		]
		errorStrategy = {task.exitStatus == 143 ? 'retry' : 'ignore'}
	}

	withName: "INDEXVCF_.*" {
		ext.prefix = {"${vcf.baseName.minus('.vcf')}"}
	}

}
